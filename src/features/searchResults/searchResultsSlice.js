import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

const initialState = {
    data: [],
    isLoading: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const callAPI = createAsyncThunk(
    'searchResults/fetchData',
    async (searchTerm) => {
        let url;
        if (searchTerm === 'init') {
          url = 'https://www.reddit.com/r/pics.json'
        } else {
          url = 'https://www.reddit.com/search.json?q='+searchTerm;
        }
        //console.log(url);
        try{
            const response = await fetch(url);
            if(response.ok){
                const jsonResponse = await response.json()
                //console.log(jsonResponse);
                // The value we return becomes the `fulfilled` action payload
                return jsonResponse.data.children;
            }
        } catch(error){
            console.log(error)
        }
    }
  );

  export const searchResultSlice = createSlice({
    name: 'searchResults',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(callAPI.pending, (state) => {
          state.isLoading = true;
        })
        .addCase(callAPI.rejected, (state) => {
          state.isLoading = false;
          alert('Sorry something went wrong...');
        })
        .addCase(callAPI.fulfilled, (state, action) => {
          state.isLoading = false;
          //console.log(action.payload);
          if (action.payload.length !== 0) {
            state.data = action.payload;
          } else {
              alert('Please try a different search');
          }
        });
    },
  });

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectData = (state) => state.searchResults.data;
export const selectIsLoading = (state) => state.searchResults.isLoading;

export default searchResultSlice.reducer;